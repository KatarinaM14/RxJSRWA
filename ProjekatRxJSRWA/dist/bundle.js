/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])},n(t,e)};function t(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(n,t){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=t.call(n,u)}catch(n){o=[6,n],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}function r(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,i,o=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(n){i={error:n}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u}function o(n,t,e){if(e||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return n.concat(r||Array.prototype.slice.call(t))}function u(n){return this instanceof u?(this.v=n,this):new u(n)}function c(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=e.apply(n,t||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){i[n]&&(r[n]=function(t){return new Promise((function(e,r){o.push([n,t,e,r])>1||a(n,t)}))})}function a(n,t){try{(e=i[n](t)).value instanceof u?Promise.resolve(e.value.v).then(l,s):f(o[0][2],e)}catch(n){f(o[0][3],n)}var e}function l(n){a("next",n)}function s(n){a("throw",n)}function f(n,t){n(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}Object.create,Object.create;var a=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function l(n){return"function"==typeof n}function s(n){return l(null==n?void 0:n.then)}var f,h=((f=function(n){return function(t){n(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}((function(n){Error.call(n),n.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function p(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var d=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return n.prototype.unsubscribe=function(){var n,t,e,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=r(a),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(t){n={error:t}}finally{try{f&&!f.done&&(t=s.return)&&t.call(s)}finally{if(n)throw n.error}}else a.remove(this);var p=this.initialTeardown;if(l(p))try{p()}catch(n){c=n instanceof h?n.errors:[n]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),b=v.next();!b.done;b=v.next()){var m=b.value;try{y(m)}catch(n){c=null!=c?c:[],n instanceof h?c=o(o([],i(c)),i(n.errors)):c.push(n)}}}catch(n){e={error:n}}finally{try{b&&!b.done&&(u=v.return)&&u.call(v)}finally{if(e)throw e.error}}}if(c)throw new h(c)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)y(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&p(t,n)},n.prototype.remove=function(t){var e=this._finalizers;e&&p(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n}();function v(n){return n instanceof d||n&&"closed"in n&&l(n.remove)&&l(n.add)&&l(n.unsubscribe)}function y(n){l(n)?n():n.unsubscribe()}d.EMPTY;var b=null,m=null,w=void 0,g=!1,k=!1,j={setTimeout:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=j.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,o([n,t],i(e))):setTimeout.apply(void 0,o([n,t],i(e)))},clearTimeout:function(n){var t=j.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function x(n){j.setTimeout((function(){if(!b)throw n;b(n)}))}function E(){}var _=S("C",void 0,void 0);function S(n,t,e){return{kind:n,value:t,error:e}}var O=null,H=function(n){function e(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,v(t)&&t.add(e)):e.destination=z,e}return t(e,n),e.create=function(n,t,e){return new N(n,t,e)},e.prototype.next=function(n){this.isStopped?C(function(n){return S("N",n,void 0)}(n),this):this._next(n)},e.prototype.error=function(n){this.isStopped?C(S("E",void 0,n),this):(this.isStopped=!0,this._error(n))},e.prototype.complete=function(){this.isStopped?C(_,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(n){this.destination.next(n)},e.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(d),I=Function.prototype.bind;function P(n,t){return I.call(n,t)}var L=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var t=this.partialObserver;if(t.next)try{t.next(n)}catch(n){T(n)}},n.prototype.error=function(n){var t=this.partialObserver;if(t.error)try{t.error(n)}catch(n){T(n)}else T(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){T(n)}},n}(),N=function(n){function e(t,e,r){var i,o,u=n.call(this)||this;return l(t)||!t?i={next:null!=t?t:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&k?((o=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},i={next:t.next&&P(t.next,o),error:t.error&&P(t.error,o),complete:t.complete&&P(t.complete,o)}):i=t,u.destination=new L(i),u}return t(e,n),e}(H);function T(n){var t;g?(t=n,g&&O&&(O.errorThrown=!0,O.error=t)):x(n)}function C(n,t){var e=m;e&&j.setTimeout((function(){return e(n,t)}))}var z={closed:!0,next:E,error:function(n){throw n},complete:E},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function B(n){return n}function M(n){return 0===n.length?B:1===n.length?n[0]:function(t){return n.reduce((function(n,t){return t(n)}),t)}}var R=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,i=this,o=(r=n)&&r instanceof H||function(n){return n&&l(n.next)&&l(n.error)&&l(n.complete)}(r)&&v(r)?n:new N(n,t,e);return function(n){if(g){var t=!O;if(t&&(O={errorThrown:!1,error:null}),n(),t){var e=O,r=e.errorThrown,i=e.error;if(O=null,r)throw i}}else n()}((function(){var n=i,t=n.operator,e=n.source;o.add(t?t.call(o,e):e?i._subscribe(o):i._trySubscribe(o))})),o},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=D(t))((function(t,r){var i=new N({next:function(t){try{n(t)}catch(n){r(n),i.unsubscribe()}},error:r,complete:t});e.subscribe(i)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[A]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return M(n)(this)},n.prototype.toPromise=function(n){var t=this;return new(n=D(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function D(n){var t;return null!==(t=null!=n?n:w)&&void 0!==t?t:Promise}function F(n){return l(n[A])}function U(n){return Symbol.asyncIterator&&l(null==n?void 0:n[Symbol.asyncIterator])}function q(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Y="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function G(n){return l(null==n?void 0:n[Y])}function J(n){return c(this,arguments,(function(){var t,r,i;return e(this,(function(e){switch(e.label){case 0:t=n.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(t.read())];case 3:return r=e.sent(),i=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(i)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function K(n){return l(null==n?void 0:n.getReader)}function Z(n){if(n instanceof R)return n;if(null!=n){if(F(n))return o=n,new R((function(n){var t=o[A]();if(l(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(n))return i=n,new R((function(n){for(var t=0;t<i.length&&!n.closed;t++)n.next(i[t]);n.complete()}));if(s(n))return e=n,new R((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,x)}));if(U(n))return Q(n);if(G(n))return t=n,new R((function(n){var e,i;try{for(var o=r(t),u=o.next();!u.done;u=o.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){e={error:n}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}n.complete()}));if(K(n))return Q(J(n))}var t,e,i,o;throw q(n)}function Q(n){return new R((function(t){(function(n,t){var i,o,u,c,a,l,s,f;return a=this,l=void 0,f=function(){var a,l;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),i=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=r(n),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(e){t[e]=n[e]&&function(t){return new Promise((function(r,i){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,i,(t=n[e](t)).done,t.value)}))}}}(n),e.label=1;case 1:return[4,i.next()];case 2:if((o=e.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=e.sent(),u={error:l},[3,11];case 6:return e.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(n,t){function e(n){try{i(f.next(n))}catch(n){t(n)}}function r(n){try{i(f.throw(n))}catch(n){t(n)}}function i(t){var i;t.done?n(t.value):(i=t.value,i instanceof s?i:new s((function(n){n(i)}))).then(e,r)}i((f=f.apply(a,l||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}function V(n,t,e,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){e(),i?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(o),!i)return o}function W(n){return function(t){if(function(n){return l(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function X(n,t,e,r,i){return new $(n,t,e,r,i)}var $=function(n){function e(t,e,r,i,o,u){var c=n.call(this,t)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,c._error=i?function(n){try{i(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return t(e,n),e.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},e}(H);function nn(n,t){return void 0===t&&(t=0),W((function(e,r){e.subscribe(X(r,(function(e){return V(r,n,(function(){return r.next(e)}),t)}),(function(){return V(r,n,(function(){return r.complete()}),t)}),(function(e){return V(r,n,(function(){return r.error(e)}),t)})))}))}function tn(n,t){return void 0===t&&(t=0),W((function(e,r){r.add(n.schedule((function(){return e.subscribe(r)}),t))}))}function en(n,t){if(!n)throw new Error("Iterable cannot be null");return new R((function(e){V(e,t,(function(){var r=n[Symbol.asyncIterator]();V(e,t,(function(){r.next().then((function(n){n.done?e.complete():e.next(n.value)}))}),0,!0)}))}))}function rn(n,t){return t?function(n,t){if(null!=n){if(F(n))return function(n,t){return Z(n).pipe(tn(t),nn(t))}(n,t);if(a(n))return function(n,t){return new R((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}(n,t);if(s(n))return function(n,t){return Z(n).pipe(tn(t),nn(t))}(n,t);if(U(n))return en(n,t);if(G(n))return function(n,t){return new R((function(e){var r;return V(e,t,(function(){r=n[Y](),V(e,t,(function(){var n,t,i;try{t=(n=r.next()).value,i=n.done}catch(n){return void e.error(n)}i?e.complete():e.next(t)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(K(n))return function(n,t){return en(J(n),t)}(n,t)}throw q(n)}(n,t):Z(n)}function on(n,t){return W((function(e,r){var i=0;e.subscribe(X(r,(function(e){r.next(n.call(t,e,i++))})))}))}function un(n,t,e){return void 0===e&&(e=1/0),l(t)?un((function(e,r){return on((function(n,i){return t(e,n,r,i)}))(Z(n(e,r)))}),e):("number"==typeof t&&(e=t),W((function(t,r){return function(n,t,e,r,i,o,u,c){var a=[],l=0,s=0,f=!1,h=function(){!f||a.length||l||t.complete()},p=function(n){return l<r?d(n):a.push(n)},d=function(n){l++;var i=!1;Z(e(n,s++)).subscribe(X(t,(function(n){t.next(n)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;a.length&&l<r;)n=void 0,n=a.shift(),d(n);h()}catch(n){t.error(n)}var n})))};return n.subscribe(X(t,p,(function(){f=!0,h()}))),function(){}}(t,r,n,e)})))}var cn=Array.isArray;var an=["addListener","removeListener"],ln=["addEventListener","removeEventListener"],sn=["on","off"];function fn(n,t,e,r){if(l(e)&&(r=e,e=void 0),r)return fn(n,t,e).pipe((u=r,on((function(n){return function(n,t){return cn(t)?n.apply(void 0,o([],i(t))):n(t)}(u,n)}))));var u,c=i(function(n){return l(n.addEventListener)&&l(n.removeEventListener)}(n)?ln.map((function(r){return function(i){return n[r](t,i,e)}})):function(n){return l(n.addListener)&&l(n.removeListener)}(n)?an.map(hn(n,t)):function(n){return l(n.on)&&l(n.off)}(n)?sn.map(hn(n,t)):[],2),s=c[0],f=c[1];if(!s&&a(n))return un((function(n){return fn(n,t,e)}))(Z(n));if(!s)throw new TypeError("Invalid event target");return new R((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return s(t),function(){return f(t)}}))}function hn(n,t){return function(e){return function(r){return n[e](t,r)}}}var pn=function(n){function e(t,e){return n.call(this)||this}return t(e,n),e.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},e}(d),dn={setInterval:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=dn.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,o([n,t],i(e))):setInterval.apply(void 0,o([n,t],i(e)))},clearInterval:function(n){var t=dn.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},vn=function(n){function e(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return t(e,n),e.prototype.schedule=function(n,t){if(void 0===t&&(t=0),this.closed)return this;this.state=n;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},e.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),dn.setInterval(n.flush.bind(n,this),e)},e.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;dn.clearInterval(t)},e.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},e}(pn),yn={now:function(){return(yn.delegate||Date).now()},delegate:void 0},bn=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=yn.now,n}(),mn=new(function(n){function e(t,e){void 0===e&&(e=bn.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return t(e,n),e.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},e}(bn))(vn);function wn(n,t){return void 0===t&&(t=mn),W((function(e,r){var i=null,o=null,u=null,c=function(){if(i){i.unsubscribe(),i=null;var n=o;o=null,r.next(n)}};function a(){var e=u+n,o=t.now();if(o<e)return i=this.schedule(void 0,e-o),void r.add(i);c()}e.subscribe(X(r,(function(e){o=e,u=t.now(),i||(i=t.schedule(a,n),r.add(i))}),(function(){c(),r.complete()}),void 0,(function(){o=i=null})))}))}function gn(n,t){return W((function(e,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};e.subscribe(X(r,(function(e){null==i||i.unsubscribe();var u=0,a=o++;Z(n(e,a)).subscribe(i=X(r,(function(n){return r.next(t?t(e,n,a,u++):n)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}var kn="http://localhost:3000",jn=function(){function n(){}return n.prototype.getHygieneObservableById=function(n){return rn(fetch(kn+"/higijena/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getHygieneObservableByName=function(n){return rn(fetch(kn+"/higijena/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.higijenaOnButtonClick=function(n){var t=this;return fn(n,"click").pipe(wn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".HigijenaRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),gn((function(n){return t.getHygieneObservableByName(n)})),on((function(n){return n[0]})))},n}(),xn=function(){function n(){this.nazivHigijene=["Colgate","Rexona","Nivea","Dove"],this.higijenaService=new jn}return n.prototype.prikazHigijene=function(n,t){var e=document.createElement("div");e.className="HigijenaDiv";var r=document.createElement("label");r.innerHTML="Higijena: ",r.className="HigijenaLbl",e.appendChild(r),this.nazivHigijene.forEach((function(n,t){var r=document.createElement("input");r.type="radio",r.name="Higijena",r.className="HigijenaRadioBtn",r.value="".concat(n),r.id="".concat(t),e.appendChild(r);var i=document.createElement("label");i.className="lblHigijenaNaziv",e.appendChild(i)}));var i=document.createElement("button");i.innerHTML="Naruci higijenu",e.appendChild(i),n.appendChild(e),t.kreirajHigijenaObservable(i)},n}(),En=function(){function n(){}return n.prototype.getFoodObservableById=function(n){return rn(fetch("http://localhost:3000/hrana/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getFoodObservableByName=function(n){return rn(fetch("http://localhost:3000/hrana/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.hranaOnButtonClick=function(n){var t=this;return fn(n,"click").pipe(wn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".HranaRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),gn((function(n){return t.getFoodObservableByName(n)})),on((function(n){return n[0]})))},n}(),_n=function(){function n(){this.nazivHrana=["Jabuke","Plazma","Balans","Zlatiborac"],this.hranaService=new En}return n.prototype.prikazHrane=function(n,t){var e=document.createElement("div");e.className="HranaDiv";var r=document.createElement("label");r.innerHTML="Hrana: ",r.className="HranaLbl",e.appendChild(r),this.nazivHrana.forEach((function(n,t){var r=document.createElement("input");r.type="radio",r.name="Hrana",r.className="HranaRadioBtn",r.value="".concat(n),r.id="".concat(t),e.appendChild(r);var i=document.createElement("label");i.className="lblHranaNaziv",e.appendChild(i)}));var i=document.createElement("button");i.innerHTML="Naruci hranu",e.appendChild(i),n.appendChild(e),t.kreirajHranaObservable(i)},n}(),Sn=function(){function n(){}return n.prototype.getLocationObservableById=function(n){return rn(fetch("http://localhost:3000/lokacija/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getLocationObservableByLocation=function(n){return rn(fetch("http://localhost:3000/lokacija/?lokacija="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.lokacijaInput=function(n){var t,e=this;return fn(n,"input").pipe(wn(500),on((function(n){return n.target.value})),(t=function(n){return n.length>=3},W((function(n,e){var r=0;n.subscribe(X(e,(function(n){return t.call(undefined,n,r++)&&e.next(n)})))}))),gn((function(n){return e.getLocationObservableByLocation(n)})),on((function(n){return n[0]})))},n}(),On=function(){function n(){this.lokacijaService=new Sn}return n.prototype.prikazLokacije=function(n,t){var e=document.createElement("div");e.className="LokacijaDiv";var r=document.createElement("label");r.innerHTML="Unesite lokaciju",r.className="LokacijaLbl",e.appendChild(r);var i=document.createElement("input");i.className="LokacijaInput",i.type="text",e.appendChild(i),t.kreirajLokacijaObservable(i),n.appendChild(e)},n}(),Hn="http://localhost:3000",In=function(){function n(){}return n.prototype.getDrinkObservableById=function(n){return rn(fetch(Hn+"/pice/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getDrinkObservableByName=function(n){return rn(fetch(Hn+"/pice/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.piceOnButtonClick=function(n){var t=this;return fn(n,"click").pipe(wn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".PiceRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),gn((function(n){return t.getDrinkObservableByName(n)})),on((function(n){return n[0]})))},n}(),Pn=function(){function n(){this.nazivPica=["Coca cola","Knjaz Milos","Fanta","Nektar"],this.piceService=new In}return n.prototype.prikazPica=function(n,t){var e=document.createElement("div");e.className="PiceDiv";var r=document.createElement("label");r.innerHTML="Pice: ",r.className="PiceLbl",e.appendChild(r),this.nazivPica.forEach((function(n,t){var r=document.createElement("input");r.type="radio",r.name="Pice",r.className="PiceRadioBtn",r.value="".concat(n),r.id="".concat(t),e.appendChild(r);var i=document.createElement("label");i.className="lblPice",e.appendChild(i),e.appendChild(document.createElement("br"))}));var i=document.createElement("button");i.innerHTML="Naruci pice",e.appendChild(i),n.appendChild(e),t.kreirajPiceObservable(i)},n}(),Ln=function(){function n(){this.hranaService=new En,this.higijenaService=new jn,this.piceService=new In,this.lokacijaService=new Sn}return n.prototype.kreirajHigijenaObservable=function(n){this.higijenaObservable=this.higijenaService.higijenaOnButtonClick(n)},n.prototype.kreirajHranaObservable=function(n){this.hranaObservable=this.hranaService.hranaOnButtonClick(n)},n.prototype.kreirajLokacijaObservable=function(n){this.lokacijaObservable=this.lokacijaService.lokacijaInput(n)},n.prototype.kreirajPiceObservable=function(n){this.piceObservable=this.piceService.piceOnButtonClick(n)},n}(),Nn=new xn,Tn=new _n,Cn=new Pn,zn=new On,An=(new function(){},new Ln);Tn.prikazHrane(document.body,An),Cn.prikazPica(document.body,An),Nn.prikazHigijene(document.body,An),zn.prikazLokacije(document.body,An)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
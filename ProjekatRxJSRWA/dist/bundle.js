/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(n,e){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(n,a)}catch(n){o=[6,n],r=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}function r(n){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&n[e],r=0;if(t)return t.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,i,o=t.call(n),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(n){i={error:n}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(i)throw i.error}}return a}function o(n,e,t){if(t||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return n.concat(r||Array.prototype.slice.call(e))}function a(n){return this instanceof a?(this.v=n,this):new a(n)}function c(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=t.apply(n,e||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){i[n]&&(r[n]=function(e){return new Promise((function(t,r){o.push([n,e,t,r])>1||u(n,e)}))})}function u(n,e){try{(t=i[n](e)).value instanceof a?Promise.resolve(t.value.v).then(s,l):f(o[0][2],t)}catch(n){f(o[0][3],n)}var t}function s(n){u("next",n)}function l(n){u("throw",n)}function f(n,e){n(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}Object.create,Object.create;var u=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function s(n){return"function"==typeof n}function l(n){return s(null==n?void 0:n.then)}var f,h=((f=function(n){return function(e){n(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(n,e){return e+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(n){Error.call(n),n.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function p(n,e){if(n){var t=n.indexOf(e);0<=t&&n.splice(t,1)}}var d=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var n,e,t,a,c;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var l=r(u),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){n={error:e}}finally{try{f&&!f.done&&(e=l.return)&&e.call(l)}finally{if(n)throw n.error}}else u.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(n){c=n instanceof h?n.errors:[n]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(n){c=null!=c?c:[],n instanceof h?c=o(o([],i(c)),i(n.errors)):c.push(n)}}}catch(n){t={error:n}}finally{try{y&&!y.done&&(a=v.return)&&a.call(v)}finally{if(t)throw t.error}}}if(c)throw new h(c)}},n.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)b(e);else{if(e instanceof n){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(e)}},n.prototype._hasParent=function(n){var e=this._parentage;return e===n||Array.isArray(e)&&e.includes(n)},n.prototype._addParent=function(n){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(n),e):e?[e,n]:n},n.prototype._removeParent=function(n){var e=this._parentage;e===n?this._parentage=null:Array.isArray(e)&&p(e,n)},n.prototype.remove=function(e){var t=this._finalizers;t&&p(t,e),e instanceof n&&e._removeParent(this)},n.EMPTY=((e=new n).closed=!0,e),n;var e}();function v(n){return n instanceof d||n&&"closed"in n&&s(n.remove)&&s(n.add)&&s(n.unsubscribe)}function b(n){s(n)?n():n.unsubscribe()}d.EMPTY;var y=null,m=null,g=void 0,w=!1,j=!1,k={setTimeout:function(n,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=k.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,o([n,e],i(t))):setTimeout.apply(void 0,o([n,e],i(t)))},clearTimeout:function(n){var e=k.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(n)},delegate:void 0};function H(n){k.setTimeout((function(){if(!y)throw n;y(n)}))}function E(){}var x=C("C",void 0,void 0);function C(n,e,t){return{kind:n,value:e,error:t}}var N=null,S=function(n){function t(e){var t=n.call(this)||this;return t.isStopped=!1,e?(t.destination=e,v(e)&&e.add(t)):t.destination=I,t}return e(t,n),t.create=function(n,e,t){return new O(n,e,t)},t.prototype.next=function(n){this.isStopped?P(function(n){return C("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?P(C("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?P(x,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),_=Function.prototype.bind;function z(n,e){return _.call(n,e)}var L=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var e=this.partialObserver;if(e.next)try{e.next(n)}catch(n){T(n)}},n.prototype.error=function(n){var e=this.partialObserver;if(e.error)try{e.error(n)}catch(n){T(n)}else T(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){T(n)}},n}(),O=function(n){function t(e,t,r){var i,o,a=n.call(this)||this;return s(e)||!e?i={next:null!=e?e:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:a&&j?((o=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},i={next:e.next&&z(e.next,o),error:e.error&&z(e.error,o),complete:e.complete&&z(e.complete,o)}):i=e,a.destination=new L(i),a}return e(t,n),t}(S);function T(n){var e;w?(e=n,w&&N&&(N.errorThrown=!0,N.error=e)):H(n)}function P(n,e){var t=m;t&&k.setTimeout((function(){return t(n,e)}))}var I={closed:!0,next:E,error:function(n){throw n},complete:E},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function B(n){return n}function M(n){return 0===n.length?B:1===n.length?n[0]:function(e){return n.reduce((function(n,e){return e(n)}),e)}}var D=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(n,e,t){var r,i=this,o=(r=n)&&r instanceof S||function(n){return n&&s(n.next)&&s(n.error)&&s(n.complete)}(r)&&v(r)?n:new O(n,e,t);return function(n){if(w){var e=!N;if(e&&(N={errorThrown:!1,error:null}),n(),e){var t=N,r=t.errorThrown,i=t.error;if(N=null,r)throw i}}else n()}((function(){var n=i,e=n.operator,t=n.source;o.add(e?e.call(o,t):t?i._subscribe(o):i._trySubscribe(o))})),o},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(e){n.error(e)}},n.prototype.forEach=function(n,e){var t=this;return new(e=R(e))((function(e,r){var i=new O({next:function(e){try{n(e)}catch(n){r(n),i.unsubscribe()}},error:r,complete:e});t.subscribe(i)}))},n.prototype._subscribe=function(n){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(n)},n.prototype[A]=function(){return this},n.prototype.pipe=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return M(n)(this)},n.prototype.toPromise=function(n){var e=this;return new(n=R(n))((function(n,t){var r;e.subscribe((function(n){return r=n}),(function(n){return t(n)}),(function(){return n(r)}))}))},n.create=function(e){return new n(e)},n}();function R(n){var e;return null!==(e=null!=n?n:g)&&void 0!==e?e:Promise}function F(n){return s(n[A])}function U(n){return Symbol.asyncIterator&&s(null==n?void 0:n[Symbol.asyncIterator])}function q(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function V(n){return s(null==n?void 0:n[K])}function Y(n){return c(this,arguments,(function(){var e,r,i;return t(this,(function(t){switch(t.label){case 0:e=n.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,a(e.read())];case 3:return r=t.sent(),i=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,a(i)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function G(n){return s(null==n?void 0:n.getReader)}function J(n){if(n instanceof D)return n;if(null!=n){if(F(n))return o=n,new D((function(n){var e=o[A]();if(s(e.subscribe))return e.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(n))return i=n,new D((function(n){for(var e=0;e<i.length&&!n.closed;e++)n.next(i[e]);n.complete()}));if(l(n))return t=n,new D((function(n){t.then((function(e){n.closed||(n.next(e),n.complete())}),(function(e){return n.error(e)})).then(null,H)}));if(U(n))return Z(n);if(V(n))return e=n,new D((function(n){var t,i;try{for(var o=r(e),a=o.next();!a.done;a=o.next()){var c=a.value;if(n.next(c),n.closed)return}}catch(n){t={error:n}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}n.complete()}));if(G(n))return Z(Y(n))}var e,t,i,o;throw q(n)}function Z(n){return new D((function(e){(function(n,e){var i,o,a,c,u,s,l,f;return u=this,s=void 0,f=function(){var u,s;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),i=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,t=n[Symbol.asyncIterator];return t?t.call(n):(n=r(n),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(t){e[t]=n[t]&&function(e){return new Promise((function(r,i){!function(n,e,t,r){Promise.resolve(r).then((function(e){n({value:e,done:t})}),e)}(r,i,(e=n[t](e)).done,e.value)}))}}}(n),t.label=1;case 1:return[4,i.next()];case 2:if((o=t.sent()).done)return[3,4];if(u=o.value,e.next(u),e.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=t.sent(),a={error:s},[3,11];case 6:return t.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,e){function t(n){try{i(f.next(n))}catch(n){e(n)}}function r(n){try{i(f.throw(n))}catch(n){e(n)}}function i(e){var i;e.done?n(e.value):(i=e.value,i instanceof l?i:new l((function(n){n(i)}))).then(t,r)}i((f=f.apply(u,s||[])).next())}))})(n,e).catch((function(n){return e.error(n)}))}))}function Q(n,e,t,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){t(),i?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(o),!i)return o}function W(n){return function(e){if(function(n){return s(null==n?void 0:n.lift)}(e))return e.lift((function(e){try{return n(e,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function X(n,e,t,r,i){return new $(n,e,t,r,i)}var $=function(n){function t(e,t,r,i,o,a){var c=n.call(this,e)||this;return c.onFinalize=o,c.shouldUnsubscribe=a,c._next=t?function(n){try{t(n)}catch(n){e.error(n)}}:n.prototype._next,c._error=i?function(n){try{i(n)}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return e(t,n),t.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;n.prototype.unsubscribe.call(this),!t&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},t}(S);function nn(n,e){return void 0===e&&(e=0),W((function(t,r){t.subscribe(X(r,(function(t){return Q(r,n,(function(){return r.next(t)}),e)}),(function(){return Q(r,n,(function(){return r.complete()}),e)}),(function(t){return Q(r,n,(function(){return r.error(t)}),e)})))}))}function en(n,e){return void 0===e&&(e=0),W((function(t,r){r.add(n.schedule((function(){return t.subscribe(r)}),e))}))}function tn(n,e){if(!n)throw new Error("Iterable cannot be null");return new D((function(t){Q(t,e,(function(){var r=n[Symbol.asyncIterator]();Q(t,e,(function(){r.next().then((function(n){n.done?t.complete():t.next(n.value)}))}),0,!0)}))}))}function rn(n,e){return e?function(n,e){if(null!=n){if(F(n))return function(n,e){return J(n).pipe(en(e),nn(e))}(n,e);if(u(n))return function(n,e){return new D((function(t){var r=0;return e.schedule((function(){r===n.length?t.complete():(t.next(n[r++]),t.closed||this.schedule())}))}))}(n,e);if(l(n))return function(n,e){return J(n).pipe(en(e),nn(e))}(n,e);if(U(n))return tn(n,e);if(V(n))return function(n,e){return new D((function(t){var r;return Q(t,e,(function(){r=n[K](),Q(t,e,(function(){var n,e,i;try{e=(n=r.next()).value,i=n.done}catch(n){return void t.error(n)}i?t.complete():t.next(e)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(n,e);if(G(n))return function(n,e){return tn(Y(n),e)}(n,e)}throw q(n)}(n,e):J(n)}function on(n,e){return W((function(t,r){var i=0;t.subscribe(X(r,(function(t){r.next(n.call(e,t,i++))})))}))}function an(n,e,t){return void 0===t&&(t=1/0),s(e)?an((function(t,r){return on((function(n,i){return e(t,n,r,i)}))(J(n(t,r)))}),t):("number"==typeof e&&(t=e),W((function(e,r){return function(n,e,t,r,i,o,a,c){var u=[],s=0,l=0,f=!1,h=function(){!f||u.length||s||e.complete()},p=function(n){return s<r?d(n):u.push(n)},d=function(n){s++;var i=!1;J(t(n,l++)).subscribe(X(e,(function(n){e.next(n)}),(function(){i=!0}),void 0,(function(){if(i)try{s--;for(;u.length&&s<r;)n=void 0,n=u.shift(),d(n);h()}catch(n){e.error(n)}var n})))};return n.subscribe(X(e,p,(function(){f=!0,h()}))),function(){}}(e,r,n,t)})))}var cn=Array.isArray;var un=["addListener","removeListener"],sn=["addEventListener","removeEventListener"],ln=["on","off"];function fn(n,e,t,r){if(s(t)&&(r=t,t=void 0),r)return fn(n,e,t).pipe((a=r,on((function(n){return function(n,e){return cn(e)?n.apply(void 0,o([],i(e))):n(e)}(a,n)}))));var a,c=i(function(n){return s(n.addEventListener)&&s(n.removeEventListener)}(n)?sn.map((function(r){return function(i){return n[r](e,i,t)}})):function(n){return s(n.addListener)&&s(n.removeListener)}(n)?un.map(hn(n,e)):function(n){return s(n.on)&&s(n.off)}(n)?ln.map(hn(n,e)):[],2),l=c[0],f=c[1];if(!l&&u(n))return an((function(n){return fn(n,e,t)}))(J(n));if(!l)throw new TypeError("Invalid event target");return new D((function(n){var e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1<e.length?e:e[0])};return l(e),function(){return f(e)}}))}function hn(n,e){return function(t){return function(r){return n[t](e,r)}}}var pn=function(n){function t(e,t){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,e){return void 0===e&&(e=0),this},t}(d),dn={setInterval:function(n,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=dn.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,o([n,e],i(t))):setInterval.apply(void 0,o([n,e],i(t)))},clearInterval:function(n){var e=dn.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(n)},delegate:void 0},vn=function(n){function t(e,t){var r=n.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,e){if(void 0===e&&(e=0),this.closed)return this;this.state=n;var t=this.id,r=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(r,t,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},t.prototype.requestAsyncId=function(n,e,t){return void 0===t&&(t=0),dn.setInterval(n.flush.bind(n,this),t)},t.prototype.recycleAsyncId=function(n,e,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return e;dn.clearInterval(e)},t.prototype.execute=function(n,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(n,e);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,e){var t,r=!1;try{this.work(n)}catch(n){r=!0,t=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(pn),bn={now:function(){return(bn.delegate||Date).now()},delegate:void 0},yn=function(){function n(e,t){void 0===t&&(t=n.now),this.schedulerActionCtor=e,this.now=t}return n.prototype.schedule=function(n,e,t){return void 0===e&&(e=0),new this.schedulerActionCtor(this,n).schedule(t,e)},n.now=bn.now,n}(),mn=new(function(n){function t(e,t){void 0===t&&(t=yn.now);var r=n.call(this,e,t)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(t,n),t.prototype.flush=function(n){var e=this.actions;if(this._active)e.push(n);else{var t;this._active=!0;do{if(t=n.execute(n.state,n.delay))break}while(n=e.shift());if(this._active=!1,t){for(;n=e.shift();)n.unsubscribe();throw t}}},t}(yn))(vn);function gn(n,e){return void 0===e&&(e=mn),W((function(t,r){var i=null,o=null,a=null,c=function(){if(i){i.unsubscribe(),i=null;var n=o;o=null,r.next(n)}};function u(){var t=a+n,o=e.now();if(o<t)return i=this.schedule(void 0,t-o),void r.add(i);c()}t.subscribe(X(r,(function(t){o=t,a=e.now(),i||(i=e.schedule(u,n),r.add(i))}),(function(){c(),r.complete()}),void 0,(function(){o=i=null})))}))}function wn(n,e){return W((function(t,r){var i=null,o=0,a=!1,c=function(){return a&&!i&&r.complete()};t.subscribe(X(r,(function(t){null==i||i.unsubscribe();var a=0,u=o++;J(n(t,u)).subscribe(i=X(r,(function(n){return r.next(e?e(t,n,u,a++):n)}),(function(){i=null,c()})))}),(function(){a=!0,c()})))}))}var jn="http://localhost:3000",kn=function(){function n(){}return n.prototype.getHygieneObservableById=function(n){return rn(fetch(jn+"/higijena/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getHygieneObservableByName=function(n){return rn(fetch(jn+"/higijena/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.higijenaOnButtonClick=function(n){var e=this;return fn(n,"click").pipe(gn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".HigijenaRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),wn((function(n){return e.getHygieneObservableByName(n)})),on((function(n){return n[0]})))},n}(),Hn=function(){function n(){this.nazivHigijene=["Colgate","Rexona","Nivea","Dove"],this.higijenaService=new kn}return n.prototype.prikazHigijene=function(n,e){var t=document.createElement("div");t.className="HigijenaDiv";var r=document.createElement("label");r.innerHTML="Higijena: ",r.className="HigijenaLbl",t.appendChild(r),this.nazivHigijene.forEach((function(n,e){var r=document.createElement("input");r.type="radio",r.name="Higijena",r.className="HigijenaRadioBtn",r.value="".concat(n),r.id="".concat(e),t.appendChild(r);var i=document.createElement("label");i.className="lblHigijenaNaziv",i.innerHTML="".concat(n),t.appendChild(i),t.appendChild(document.createElement("br"))}));var i=document.createElement("button");i.innerHTML="Naruci higijenu",t.appendChild(i),n.appendChild(t),e.kreirajHigijenaObservable(i)},n}(),En=function(){function n(){}return n.prototype.getFoodObservableById=function(n){return rn(fetch("http://localhost:3000/hrana/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getFoodObservableByName=function(n){return rn(fetch("http://localhost:3000/hrana/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.hranaOnButtonClick=function(n){var e=this;return fn(n,"click").pipe(gn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".HranaRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),wn((function(n){return e.getFoodObservableByName(n)})),on((function(n){return n[0]})))},n}(),xn=function(){function n(){this.nazivHrana=["Jabuke","Plazma","Balans","Zlatiborac"],this.hranaService=new En}return n.prototype.prikazHrane=function(n,e){var t=document.createElement("div");t.className="HranaDiv";var r=document.createElement("label");r.innerHTML="Hrana: ",r.className="HranaLbl",t.appendChild(r),this.nazivHrana.forEach((function(n,e){var r=document.createElement("input");r.type="radio",r.name="Hrana",r.className="HranaRadioBtn",r.value="".concat(n),r.id="".concat(e),t.appendChild(r);var i=document.createElement("label");i.className="lblHranaNaziv",i.innerHTML="".concat(n),t.appendChild(i),t.appendChild(document.createElement("br"))}));var i=document.createElement("button");i.innerHTML="Naruci hranu",t.appendChild(i),n.appendChild(t),e.kreirajHranaObservable(i)},n}(),Cn=function(){function n(){}return n.prototype.getLocationObservableById=function(n){return rn(fetch("http://localhost:3000/lokacija/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getLocationObservableByLocation=function(n){return rn(fetch("http://localhost:3000/lokacija/?lokacija="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.lokacijaInput=function(n){var e,t=this;return fn(n,"input").pipe(gn(500),on((function(n){return n.target.value})),(e=function(n){return n.length>=3},W((function(n,t){var r=0;n.subscribe(X(t,(function(n){return e.call(undefined,n,r++)&&t.next(n)})))}))),wn((function(n){return t.getLocationObservableByLocation(n)})),on((function(n){return n[0]})))},n}(),Nn=function(){function n(){this.lokacijaService=new Cn}return n.prototype.prikazLokacije=function(n,e){var t=document.createElement("div");t.className="LokacijaDiv";var r=document.createElement("label");r.innerHTML="Unesite lokaciju",r.className="LokacijaLbl",t.appendChild(r);var i=document.createElement("input");i.className="LokacijaInput",i.type="text",t.appendChild(i),e.kreirajLokacijaObservable(i),n.appendChild(t)},n}(),Sn=function(){function n(){this.cenaHrane=0,this.cenaHigijene=0,this.cenaPica=0}return n.prototype.naruciHranu=function(n){this.hrana=n,this.postaviCenu()},n.prototype.naruciPice=function(n){this.pice=n,this.postaviCenu()},n.prototype.naruciHigijenu=function(n){this.higijena=n,this.postaviCenu()},n.prototype.dodajLokaciju=function(n){this.lokacija=n},n.prototype.postaviCenu=function(){this.cenaHrane=this.hrana?this.hrana.cena:0,this.cenaPica=this.pice?this.pice.cena:0,this.cenaHigijene=this.higijena?this.higijena.cena:0},n.prototype.prikaziNarudzbinu=function(n){var e=n.getElementsByClassName("Narudzbina");Array.from(e).forEach((function(e){n.removeChild(e)}));var t=document.createElement("div");t.className="Narudzbina",n.appendChild(t);var r=document.createElement("div");r.innerHTML="Vasa narudzbina je:",r.className="Naslov",t.appendChild(r),this.hrana&&this.prikaziHranu(t),this.pice&&this.prikaziPice(t),this.higijena&&this.prikaziHigijenu(t);var i=document.createElement("div");i.innerHTML="Cena poruzdbine je: ".concat(Number.parseInt(this.cenaHrane.toString())+Number.parseInt(this.cenaPica.toString())+Number.parseInt(this.cenaHigijene.toString())),i.className="Cena",t.appendChild(i),this.lokacija&&this.prikaziLokaciju(t),this.refreshDugme(t)},n.prototype.prikaziHranu=function(n){var e=document.createElement("div");e.innerHTML="Hrana: "+this.hrana.tip,e.className="Hrana",n.appendChild(e);var t=document.createElement("div");t.innerHTML="Cena hrane: "+this.hrana.cena,t.className="CenaHrane",n.appendChild(t)},n.prototype.prikaziPice=function(n){var e=document.createElement("div");e.innerHTML="Pice: "+this.pice.naziv,e.className="Pice",n.appendChild(e);var t=document.createElement("div");t.innerHTML="Cena pica: "+this.pice.cena,t.className="CenaPica",n.appendChild(t)},n.prototype.prikaziHigijenu=function(n){var e=document.createElement("div");e.innerHTML="Higijena: "+this.higijena.naziv,e.className="HigijenaNaziv",n.appendChild(e);var t=document.createElement("div");t.innerHTML="Cena higijenskog proizvoda: "+this.higijena.cena,t.className="HigijenaCena",n.appendChild(t)},n.prototype.prikaziLokaciju=function(n){var e=document.createElement("div");e.innerHTML="Vasa lokacija je: "+this.lokacija.lokacija,e.className="Lokacija",n.appendChild(e);var t=document.createElement("div");t.innerHTML="Vreme do stizanja narudzbine na vasu lokaciju: "+this.lokacija.vreme,t.className="VremeDostavljanja",n.appendChild(t)},n.prototype.refreshDugme=function(n){var e=this,t=document.createElement("button");t.innerHTML="Kupi",t.className="dugmeKupi",n.appendChild(t),fn(t,"click").subscribe((function(){return e.refreshKupovina()}))},n.prototype.refreshKupovina=function(){this.higijena=null,this.pice=null,this.hrana=null,this.lokacija=null,this.cenaHigijene=0,this.cenaHrane=0,this.cenaPica=0},n}(),_n="http://localhost:3000",zn=function(){function n(){}return n.prototype.getDrinkObservableById=function(n){return rn(fetch(_n+"/pice/"+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.getDrinkObservableByName=function(n){return rn(fetch(_n+"/pice/?naziv="+n).then((function(n){if(n.ok)return n.json();throw new Error("fetch error")})).catch((function(n){return console.log(n)})))},n.prototype.piceOnButtonClick=function(n){var e=this;return fn(n,"click").pipe(gn(1e3),on((function(n){return n.target.parentNode})),on((function(n){return Array.from(n.querySelectorAll(".PiceRadioBtn"))})),on((function(n){return n})),on((function(n){return n.filter((function(n){return!0===n.checked}))})),on((function(n){return n[0]})),on((function(n){return n.value})),wn((function(n){return e.getDrinkObservableByName(n)})),on((function(n){return n[0]})))},n}(),Ln=function(){function n(){this.nazivPica=["Coca cola","Knjaz Milos","Fanta","Nektar"],this.piceService=new zn}return n.prototype.prikazPica=function(n,e){var t=document.createElement("div");t.className="PiceDiv";var r=document.createElement("label");r.innerHTML="Pice: ",r.className="PiceLbl",t.appendChild(r),this.nazivPica.forEach((function(n,e){var r=document.createElement("input");r.type="radio",r.name="Pice",r.className="PiceRadioBtn",r.value="".concat(n),r.id="".concat(e),t.appendChild(r);var i=document.createElement("label");i.className="lblPice",i.innerHTML="".concat(n),t.appendChild(i),t.appendChild(document.createElement("br"))}));var i=document.createElement("button");i.innerHTML="Naruci pice",t.appendChild(i),n.appendChild(t),e.kreirajPiceObservable(i)},n}();function On(n){return void 0===n&&(n=1/0),an(B,n)}var Tn=new D((function(n){return n.complete()}));function Pn(n){return n[n.length-1]}function In(n){return(e=Pn(n))&&s(e.schedule)?n.pop():void 0;var e}function An(n,e){return"number"==typeof Pn(n)?n.pop():e}var Bn=function(){function n(){this.hranaService=new En,this.higijenaService=new kn,this.piceService=new zn,this.lokacijaService=new Cn}return n.prototype.kreirajHigijenaObservable=function(n){this.higijenaObservable=this.higijenaService.higijenaOnButtonClick(n)},n.prototype.kreirajHranaObservable=function(n){this.hranaObservable=this.hranaService.hranaOnButtonClick(n)},n.prototype.kreirajLokacijaObservable=function(n){this.lokacijaObservable=this.lokacijaService.lokacijaInput(n)},n.prototype.kreirajPiceObservable=function(n){this.piceObservable=this.piceService.piceOnButtonClick(n)},n.prototype.kupi=function(n,e){(function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=In(n),r=An(n,1/0),i=n;return i.length?1===i.length?J(i[0]):On(r)(rn(i,t)):Tn})(this.hranaObservable.pipe(on((function(e){return n.naruciHranu(e)}))),this.piceObservable.pipe(on((function(e){return n.naruciPice(e)}))),this.higijenaObservable.pipe(on((function(e){return n.naruciHigijenu(e)}))),this.lokacijaObservable.pipe(on((function(e){return n.dodajLokaciju(e)})))).subscribe((function(){return n.prikaziNarudzbinu(e)}))},n}(),Mn=new Hn,Dn=new xn,Rn=new Ln,Fn=new Nn,Un=new Sn,qn=new Bn;Dn.prikazHrane(document.body,qn),Rn.prikazPica(document.body,qn),Mn.prikazHigijene(document.body,qn),Fn.prikazLokacije(document.body,qn),qn.kupi(Un,document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
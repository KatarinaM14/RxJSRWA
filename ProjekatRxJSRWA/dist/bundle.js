/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e=function(n,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},e(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(e,a)}catch(e){o=[6,e],r=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function r(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,i,o=t.call(e),a=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(i)throw i.error}}return a}function o(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}function u(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=t.apply(e,n||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){i[e]&&(r[e]=function(n){return new Promise((function(t,r){o.push([e,n,t,r])>1||c(e,n)}))})}function c(e,n){try{(t=i[e](n)).value instanceof a?Promise.resolve(t.value.v).then(l,s):f(o[0][2],t)}catch(e){f(o[0][3],e)}var t}function l(e){c("next",e)}function s(e){c("throw",e)}function f(e,n){e(n),o.shift(),o.length&&c(o[0][0],o[0][1])}}Object.create,Object.create;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function l(e){return"function"==typeof e}function s(e){return l(null==e?void 0:e.then)}var f,p=((f=function(e){return function(n){e(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(e,n){return n+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}((function(e){Error.call(e),e.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function h(e,n){if(e){var t=e.indexOf(n);0<=t&&e.splice(t,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,n,t,a,u;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var s=r(c),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(n){e={error:n}}finally{try{f&&!f.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}else c.remove(this);var h=this.initialTeardown;if(l(h))try{h()}catch(e){u=e instanceof p?e.errors:[e]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),m=v.next();!m.done;m=v.next()){var y=m.value;try{b(y)}catch(e){u=null!=u?u:[],e instanceof p?u=o(o([],i(u)),i(e.errors)):u.push(e)}}}catch(e){t={error:e}}finally{try{m&&!m.done&&(a=v.return)&&a.call(v)}finally{if(t)throw t.error}}}if(u)throw new p(u)}},e.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)b(n);else{if(n instanceof e){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},e.prototype._hasParent=function(e){var n=this._parentage;return n===e||Array.isArray(n)&&n.includes(e)},e.prototype._addParent=function(e){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(e),n):n?[n,e]:e},e.prototype._removeParent=function(e){var n=this._parentage;n===e?this._parentage=null:Array.isArray(n)&&h(n,e)},e.prototype.remove=function(n){var t=this._finalizers;t&&h(t,n),n instanceof e&&n._removeParent(this)},e.EMPTY=((n=new e).closed=!0,n),e;var n}();function v(e){return e instanceof d||e&&"closed"in e&&l(e.remove)&&l(e.add)&&l(e.unsubscribe)}function b(e){l(e)?e():e.unsubscribe()}d.EMPTY;var m=null,y=null,g=void 0,k=!1,j=!1,w={setTimeout:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=w.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,o([e,n],i(t))):setTimeout.apply(void 0,o([e,n],i(t)))},clearTimeout:function(e){var n=w.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0};function E(e){w.setTimeout((function(){if(!m)throw e;m(e)}))}function H(){}var C=N("C",void 0,void 0);function N(e,n,t){return{kind:e,value:n,error:t}}var P=null,x=function(e){function t(n){var t=e.call(this)||this;return t.isStopped=!1,n?(t.destination=n,v(n)&&n.add(t)):t.destination=I,t}return n(t,e),t.create=function(e,n,t){return new O(e,n,t)},t.prototype.next=function(e){this.isStopped?T(function(e){return N("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?T(N("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?T(C,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),L=Function.prototype.bind;function z(e,n){return L.call(e,n)}var S=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var n=this.partialObserver;if(n.next)try{n.next(e)}catch(e){_(e)}},e.prototype.error=function(e){var n=this.partialObserver;if(n.error)try{n.error(e)}catch(e){_(e)}else _(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){_(e)}},e}(),O=function(e){function t(n,t,r){var i,o,a=e.call(this)||this;return l(n)||!n?i={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:a&&j?((o=Object.create(n)).unsubscribe=function(){return a.unsubscribe()},i={next:n.next&&z(n.next,o),error:n.error&&z(n.error,o),complete:n.complete&&z(n.complete,o)}):i=n,a.destination=new S(i),a}return n(t,e),t}(x);function _(e){var n;k?(n=e,k&&P&&(P.errorThrown=!0,P.error=n)):E(e)}function T(e,n){var t=y;t&&w.setTimeout((function(){return t(e,n)}))}var I={closed:!0,next:H,error:function(e){throw e},complete:H},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function M(e){return e}function B(e){return 0===e.length?M:1===e.length?e[0]:function(n){return e.reduce((function(e,n){return n(e)}),n)}}var D=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(n){var t=new e;return t.source=this,t.operator=n,t},e.prototype.subscribe=function(e,n,t){var r,i=this,o=(r=e)&&r instanceof x||function(e){return e&&l(e.next)&&l(e.error)&&l(e.complete)}(r)&&v(r)?e:new O(e,n,t);return function(e){if(k){var n=!P;if(n&&(P={errorThrown:!1,error:null}),e(),n){var t=P,r=t.errorThrown,i=t.error;if(P=null,r)throw i}}else e()}((function(){var e=i,n=e.operator,t=e.source;o.add(n?n.call(o,t):t?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(n){e.error(n)}},e.prototype.forEach=function(e,n){var t=this;return new(n=R(n))((function(n,r){var i=new O({next:function(n){try{e(n)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});t.subscribe(i)}))},e.prototype._subscribe=function(e){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(e)},e.prototype[A]=function(){return this},e.prototype.pipe=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return B(e)(this)},e.prototype.toPromise=function(e){var n=this;return new(e=R(e))((function(e,t){var r;n.subscribe((function(e){return r=e}),(function(e){return t(e)}),(function(){return e(r)}))}))},e.create=function(n){return new e(n)},e}();function R(e){var n;return null!==(n=null!=e?e:g)&&void 0!==n?n:Promise}function q(e){return l(e[A])}function U(e){return Symbol.asyncIterator&&l(null==e?void 0:e[Symbol.asyncIterator])}function F(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function G(e){return l(null==e?void 0:e[K])}function V(e){return u(this,arguments,(function(){var n,r,i;return t(this,(function(t){switch(t.label){case 0:n=e.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,a(n.read())];case 3:return r=t.sent(),i=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,a(i)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function Y(e){return l(null==e?void 0:e.getReader)}function Z(e){if(e instanceof D)return e;if(null!=e){if(q(e))return o=e,new D((function(e){var n=o[A]();if(l(n.subscribe))return n.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new D((function(e){for(var n=0;n<i.length&&!e.closed;n++)e.next(i[n]);e.complete()}));if(s(e))return t=e,new D((function(e){t.then((function(n){e.closed||(e.next(n),e.complete())}),(function(n){return e.error(n)})).then(null,E)}));if(U(e))return J(e);if(G(e))return n=e,new D((function(e){var t,i;try{for(var o=r(n),a=o.next();!a.done;a=o.next()){var u=a.value;if(e.next(u),e.closed)return}}catch(e){t={error:e}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(t)throw t.error}}e.complete()}));if(Y(e))return J(V(e))}var n,t,i,o;throw F(e)}function J(e){return new D((function(n){(function(e,n){var i,o,a,u,c,l,s,f;return c=this,l=void 0,f=function(){var c,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=e[Symbol.asyncIterator];return t?t.call(e):(e=r(e),n={},i("next"),i("throw"),i("return"),n[Symbol.asyncIterator]=function(){return this},n);function i(t){n[t]=e[t]&&function(n){return new Promise((function(r,i){!function(e,n,t,r){Promise.resolve(r).then((function(n){e({value:n,done:t})}),n)}(r,i,(n=e[t](n)).done,n.value)}))}}}(e),t.label=1;case 1:return[4,i.next()];case 2:if((o=t.sent()).done)return[3,4];if(c=o.value,n.next(c),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),a={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),o&&!o.done&&(u=i.return)?[4,u.call(i)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,n){function t(e){try{i(f.next(e))}catch(e){n(e)}}function r(e){try{i(f.throw(e))}catch(e){n(e)}}function i(n){var i;n.done?e(n.value):(i=n.value,i instanceof s?i:new s((function(e){e(i)}))).then(t,r)}i((f=f.apply(c,l||[])).next())}))})(e,n).catch((function(e){return n.error(e)}))}))}function Q(e,n,t,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){t(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function W(e){return function(n){if(function(e){return l(null==e?void 0:e.lift)}(n))return n.lift((function(n){try{return e(n,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function X(e,n,t,r,i){return new $(e,n,t,r,i)}var $=function(e){function t(n,t,r,i,o,a){var u=e.call(this,n)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=t?function(e){try{t(e)}catch(e){n.error(e)}}:e.prototype._next,u._error=i?function(e){try{i(e)}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){n.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return n(t,e),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(x);function ee(e,n){return void 0===n&&(n=0),W((function(t,r){t.subscribe(X(r,(function(t){return Q(r,e,(function(){return r.next(t)}),n)}),(function(){return Q(r,e,(function(){return r.complete()}),n)}),(function(t){return Q(r,e,(function(){return r.error(t)}),n)})))}))}function ne(e,n){return void 0===n&&(n=0),W((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function te(e,n){if(!e)throw new Error("Iterable cannot be null");return new D((function(t){Q(t,n,(function(){var r=e[Symbol.asyncIterator]();Q(t,n,(function(){r.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}function re(e,n){return n?function(e,n){if(null!=e){if(q(e))return function(e,n){return Z(e).pipe(ne(n),ee(n))}(e,n);if(c(e))return function(e,n){return new D((function(t){var r=0;return n.schedule((function(){r===e.length?t.complete():(t.next(e[r++]),t.closed||this.schedule())}))}))}(e,n);if(s(e))return function(e,n){return Z(e).pipe(ne(n),ee(n))}(e,n);if(U(e))return te(e,n);if(G(e))return function(e,n){return new D((function(t){var r;return Q(t,n,(function(){r=e[K](),Q(t,n,(function(){var e,n,i;try{n=(e=r.next()).value,i=e.done}catch(e){return void t.error(e)}i?t.complete():t.next(n)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(e,n);if(Y(e))return function(e,n){return te(V(e),n)}(e,n)}throw F(e)}(e,n):Z(e)}function ie(e,n){return W((function(t,r){var i=0;t.subscribe(X(r,(function(t){r.next(e.call(n,t,i++))})))}))}function oe(e,n,t){return void 0===t&&(t=1/0),l(n)?oe((function(t,r){return ie((function(e,i){return n(t,e,r,i)}))(Z(e(t,r)))}),t):("number"==typeof n&&(t=n),W((function(n,r){return function(e,n,t,r,i,o,a,u){var c=[],l=0,s=0,f=!1,p=function(){!f||c.length||l||n.complete()},h=function(e){return l<r?d(e):c.push(e)},d=function(e){l++;var i=!1;Z(t(e,s++)).subscribe(X(n,(function(e){n.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;c.length&&l<r;)e=void 0,e=c.shift(),d(e);p()}catch(e){n.error(e)}var e})))};return e.subscribe(X(n,h,(function(){f=!0,p()}))),function(){}}(n,r,e,t)})))}var ae=Array.isArray;var ue=["addListener","removeListener"],ce=["addEventListener","removeEventListener"],le=["on","off"];function se(e,n,t,r){if(l(t)&&(r=t,t=void 0),r)return se(e,n,t).pipe((a=r,ie((function(e){return function(e,n){return ae(n)?e.apply(void 0,o([],i(n))):e(n)}(a,e)}))));var a,u=i(function(e){return l(e.addEventListener)&&l(e.removeEventListener)}(e)?ce.map((function(r){return function(i){return e[r](n,i,t)}})):function(e){return l(e.addListener)&&l(e.removeListener)}(e)?ue.map(fe(e,n)):function(e){return l(e.on)&&l(e.off)}(e)?le.map(fe(e,n)):[],2),s=u[0],f=u[1];if(!s&&c(e))return oe((function(e){return se(e,n,t)}))(Z(e));if(!s)throw new TypeError("Invalid event target");return new D((function(e){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.next(1<n.length?n:n[0])};return s(n),function(){return f(n)}}))}function fe(e,n){return function(t){return function(r){return e[t](n,r)}}}var pe=function(e){function t(n,t){return e.call(this)||this}return n(t,e),t.prototype.schedule=function(e,n){return void 0===n&&(n=0),this},t}(d),he={setInterval:function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=he.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,o([e,n],i(t))):setInterval.apply(void 0,o([e,n],i(t)))},clearInterval:function(e){var n=he.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0},de=function(e){function t(n,t){var r=e.call(this,n,t)||this;return r.scheduler=n,r.work=t,r.pending=!1,r}return n(t,e),t.prototype.schedule=function(e,n){if(void 0===n&&(n=0),this.closed)return this;this.state=e;var t=this.id,r=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(r,t,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},t.prototype.requestAsyncId=function(e,n,t){return void 0===t&&(t=0),he.setInterval(e.flush.bind(e,this),t)},t.prototype.recycleAsyncId=function(e,n,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return n;he.clearInterval(n)},t.prototype.execute=function(e,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,n);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,n){var t,r=!1;try{this.work(e)}catch(e){r=!0,t=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=n&&(this.id=this.recycleAsyncId(t,n,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(pe),ve={now:function(){return(ve.delegate||Date).now()},delegate:void 0},be=function(){function e(n,t){void 0===t&&(t=e.now),this.schedulerActionCtor=n,this.now=t}return e.prototype.schedule=function(e,n,t){return void 0===n&&(n=0),new this.schedulerActionCtor(this,e).schedule(t,n)},e.now=ve.now,e}(),me=new(function(e){function t(n,t){void 0===t&&(t=be.now);var r=e.call(this,n,t)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return n(t,e),t.prototype.flush=function(e){var n=this.actions;if(this._active)n.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=n.shift());if(this._active=!1,t){for(;e=n.shift();)e.unsubscribe();throw t}}},t}(be))(de),ye=me;function ge(e,n){return void 0===n&&(n=me),W((function(t,r){var i=null,o=null,a=null,u=function(){if(i){i.unsubscribe(),i=null;var e=o;o=null,r.next(e)}};function c(){var t=a+e,o=n.now();if(o<t)return i=this.schedule(void 0,t-o),void r.add(i);u()}t.subscribe(X(r,(function(t){o=t,a=n.now(),i||(i=n.schedule(c,e),r.add(i))}),(function(){u(),r.complete()}),void 0,(function(){o=i=null})))}))}function ke(e,n){return W((function(t,r){var i=null,o=0,a=!1,u=function(){return a&&!i&&r.complete()};t.subscribe(X(r,(function(t){null==i||i.unsubscribe();var a=0,c=o++;Z(e(t,c)).subscribe(i=X(r,(function(e){return r.next(n?n(t,e,c,a++):e)}),(function(){i=null,u()})))}),(function(){a=!0,u()})))}))}var je="http://localhost:3000",we=function(){function e(){}return e.prototype.getHygieneObservableById=function(e){return re(fetch(je+"/higijena/"+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.getHygieneObservableByName=function(e){return re(fetch(je+"/higijena/?naziv="+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.higijenaOnButtonClick=function(e){var n=this;return se(e,"click").pipe(ge(1e3),ie((function(e){return e.target.parentNode})),ie((function(e){return Array.from(e.querySelectorAll(".HigijenaRadioBtn"))})),ie((function(e){return e})),ie((function(e){return e.filter((function(e){return!0===e.checked}))})),ie((function(e){return e[0]})),ie((function(e){return e.value})),ke((function(e){return n.getHygieneObservableByName(e)})),ie((function(e){return e[0]})))},e}(),Ee=function(){function e(){this.nazivHigijene=["Colgate","Rexona","Nivea","Dove"],this.higijenaService=new we}return e.prototype.prikazHigijene=function(e,n){var t=document.createElement("div");t.className="HigijenaDiv";var r=document.createElement("label");r.innerHTML="Higijena: ",r.className="HigijenaLbl",t.appendChild(r),this.nazivHigijene.forEach((function(e,n){var r=document.createElement("div"),i=document.createElement("input");i.type="radio",i.name="Higijena",i.className="HigijenaRadioBtn",i.value="".concat(e),i.id="".concat(n),r.appendChild(i);var o=document.createElement("label");o.className="lblHigijenaNaziv",o.innerHTML="".concat(e),r.appendChild(o),t.appendChild(r)}));var i=document.createElement("button");i.innerHTML="Dodaj u korpu",i.className="Button",t.appendChild(i),e.appendChild(t),n.kreirajHigijenaObservable(i)},e}(),He=function(){function e(){}return e.prototype.getFoodObservableById=function(e){return re(fetch("http://localhost:3000/hrana/"+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.getFoodObservableByName=function(e){return re(fetch("http://localhost:3000/hrana/?naziv="+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.hranaOnButtonClick=function(e){var n=this;return se(e,"click").pipe(ge(1e3),ie((function(e){return e.target.parentNode})),ie((function(e){return Array.from(e.querySelectorAll(".HranaRadioBtn"))})),ie((function(e){return e})),ie((function(e){return e.filter((function(e){return!0===e.checked}))})),ie((function(e){return e[0]})),ie((function(e){return e.value})),ke((function(e){return n.getFoodObservableByName(e)})),ie((function(e){return e[0]})))},e}(),Ce=function(){function e(){this.nazivHrana=["Jabuke","Plazma","Balans","Zlatiborac"],this.hranaService=new He}return e.prototype.prikazHrane=function(e,n){var t=document.createElement("div");t.className="HranaDiv";var r=document.createElement("label");r.innerHTML="Hrana: ",r.className="HranaLbl",t.appendChild(r),this.nazivHrana.forEach((function(e,n){var r=document.createElement("div"),i=document.createElement("input");i.type="radio",i.name="Hrana",i.className="HranaRadioBtn",i.value="".concat(e),i.id="".concat(n),r.appendChild(i);var o=document.createElement("label");o.className="lblHranaNaziv",o.innerHTML="".concat(e),r.appendChild(o),t.appendChild(r)}));var i=document.createElement("button");i.className="Button",i.innerHTML="Dodaj u korpu",t.appendChild(i),e.appendChild(t),n.kreirajHranaObservable(i)},e}(),Ne=function(){function e(){}return e.prototype.getLocationObservableById=function(e){return re(fetch("http://localhost:3000/lokacija/"+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.getLocationObservableByLocation=function(e){return re(fetch("http://localhost:3000/lokacija/?lokacija="+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.lokacijaInput=function(e){var n,t=this;return se(e,"input").pipe(ge(500),ie((function(e){return e.target.value})),(n=function(e){return e.length>=3},W((function(e,t){var r=0;e.subscribe(X(t,(function(e){return n.call(undefined,e,r++)&&t.next(e)})))}))),ke((function(e){return t.getLocationObservableByLocation(e)})),ie((function(e){return e[0]})))},e}(),Pe=function(){function e(){this.lokacijaService=new Ne}return e.prototype.prikazLokacije=function(e,n){var t=document.createElement("div");t.className="LokacijaDiv";var r=document.createElement("label");r.innerHTML="Unesite lokaciju",r.className="LokacijaLbl",t.appendChild(r);var i=document.createElement("input");i.className="LokacijaInput",i.type="text",t.appendChild(i),n.kreirajLokacijaObservable(i),e.appendChild(t)},e}();function xe(e){return void 0===e&&(e=1/0),oe(M,e)}function Le(){return xe(1)}function ze(e){return e&&l(e.schedule)}function Se(e){return e[e.length-1]}function Oe(e){return ze(Se(e))?e.pop():void 0}function _e(e,n){return"number"==typeof Se(e)?e.pop():n}var Te=new D((function(e){return e.complete()}));function Ie(e){return e<=0?function(){return Te}:W((function(n,t){var r=0;n.subscribe(X(t,(function(n){++r<=e&&(t.next(n),e<=r&&t.complete())})))}))}function Ae(e,n){return n?function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return Le()(re(e,Oe(e)))}(n.pipe(Ie(1),W((function(e,n){e.subscribe(X(n,H))}))),t.pipe(Ae(e)))}:oe((function(n,t){return e(n,t).pipe(Ie(1),function(e){return ie((function(){return e}))}(n))}))}var Me=function(){function e(){this.cenaHrane=0,this.cenaHigijene=0,this.cenaPica=0}return e.prototype.naruciHranu=function(e){this.hrana=e,this.postaviCenu()},e.prototype.naruciPice=function(e){this.pice=e,this.postaviCenu()},e.prototype.naruciHigijenu=function(e){this.higijena=e,this.postaviCenu()},e.prototype.dodajLokaciju=function(e){this.lokacija=e},e.prototype.postaviCenu=function(){this.cenaHrane=this.hrana?this.hrana.cena:0,this.cenaPica=this.pice?this.pice.cena:0,this.cenaHigijene=this.higijena?this.higijena.cena:0},e.prototype.prikaziNarudzbinu=function(e){var n=e.getElementsByClassName("Narudzbina");Array.from(n).forEach((function(n){e.removeChild(n)}));var t=document.createElement("div");t.className="Narudzbina",e.appendChild(t);var r=document.createElement("div");r.innerHTML="Vasa narudzbina je:",r.className="Naslov",t.appendChild(r),this.hrana&&this.prikaziHranu(t),this.pice&&this.prikaziPice(t),this.higijena&&this.prikaziHigijenu(t);var i=document.createElement("div");i.innerHTML="Cena poruzdbine je: ".concat(Number.parseInt(this.cenaHrane.toString())+Number.parseInt(this.cenaPica.toString())+Number.parseInt(this.cenaHigijene.toString())),i.className="Cena",t.appendChild(i),this.lokacija&&this.prikaziLokaciju(t),this.refreshDugme(t)},e.prototype.prikaziHranu=function(e){var n=document.createElement("div");n.innerHTML="Hrana: "+this.hrana.naziv,n.className="Hrana",e.appendChild(n);var t=document.createElement("div");t.innerHTML="Cena hrane: "+this.hrana.cena,t.className="CenaHrane",e.appendChild(t)},e.prototype.prikaziPice=function(e){var n=document.createElement("div");n.innerHTML="Pice: "+this.pice.naziv,n.className="Pice",e.appendChild(n);var t=document.createElement("div");t.innerHTML="Cena pica: "+this.pice.cena,t.className="CenaPica",e.appendChild(t)},e.prototype.prikaziHigijenu=function(e){var n=document.createElement("div");n.innerHTML="Higijena: "+this.higijena.naziv,n.className="HigijenaNaziv",e.appendChild(n);var t=document.createElement("div");t.innerHTML="Cena higijenskog proizvoda: "+this.higijena.cena,t.className="HigijenaCena",e.appendChild(t)},e.prototype.prikaziLokaciju=function(e){var n=document.createElement("div");n.innerHTML="Vasa lokacija je: "+this.lokacija.lokacija,n.className="Lokacija",e.appendChild(n);var t=document.createElement("div");t.innerHTML="Vreme do stizanja narudzbine na vasu lokaciju: "+this.lokacija.vreme,t.className="VremeDostavljanja",e.appendChild(t)},e.prototype.refreshDugme=function(e){var n=this,t=document.createElement("button");t.innerHTML="Kupi",t.className="dugmeKupi",e.appendChild(t);var r=this.lokacija.vreme.split(" ",1),i=parseInt(r[0]);console.log(i),se(t,"click").pipe(function(e,n){void 0===n&&(n=me);var t=function(e,n,t){void 0===e&&(e=0),void 0===t&&(t=ye);var r=-1;return null!=n&&(ze(n)?t=n:r=n),new D((function(n){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-t.now():e;o<0&&(o=0);var a=0;return t.schedule((function(){n.closed||(n.next(a++),0<=r?this.schedule(void 0,r):n.complete())}),o)}))}(e,n);return Ae((function(){return t}))}(parseInt(r[0])),ie((function(){return n.obavestiKorisnikaODostavi()}))).subscribe((function(){return n.refreshKupovina()}))},e.prototype.refreshKupovina=function(){console.log("Refresh"),this.higijena=null,this.pice=null,this.hrana=null,this.lokacija=null,this.cenaHigijene=0,this.cenaHrane=0,this.cenaPica=0},e.prototype.obavestiKorisnikaODostavi=function(){var e=this,n=document.createElement("div");n.className="PorukaDiv",document.body.appendChild(n);var t=document.createElement("label");t.className="LblPoruka",t.innerHTML="Vasa kupovina je isporucena.",n.appendChild(t);var r=document.createElement("label");r.className="LblPoruka",r.innerHTML="Molimo Vas da nam odgovorite da li ste zadvoljni isporukom.",n.appendChild(r);var i=document.createElement("input");i.className="PorukaInput",n.appendChild(i),se(i,"input").pipe(ge(500),ie((function(e){return e.target.value}))).subscribe((function(n){return e.ispitajPoruku(n)}))},e.prototype.ispitajPoruku=function(e){var n=this;if(console.log(e),"Zadovoljan sam isporukom"===e||"Zadovoljna sam isporukom"===e){var t=document.querySelector(".PorukaDiv");(r=document.createElement("label")).className="PoslednjaPoruka",r.innerHTML="Zadovoljni kupci su nas prioritet",t.appendChild(r)}else if("Nisam zadovoljan isporukom"==e||"Nisam zadovoljna isporukom"==e){var r;t=document.querySelector(".PorukaDiv"),(r=document.createElement("label")).className="PoslednjaPoruka",r.innerHTML="Ukazite nam na probleme koje ste imali prilikom dostave kako do istih ne bi doslo ubuduce",t.appendChild(r);var i=document.createElement("input");i.className="PorukaInput",t.appendChild(i),se(i,"input").pipe(ge(5e3),ie((function(e){return e.target.value}))).subscribe((function(e){return n.poslednjaPoruka()}))}},e.prototype.poslednjaPoruka=function(){var e=document.querySelector(".PorukaDiv"),n=document.createElement("label");n.className="PoslednjaPoruka",n.innerHTML="Uzecemo vase primedbe u obzir!",e.appendChild(n)},e}(),Be="http://localhost:3000",De=function(){function e(){}return e.prototype.getDrinkObservableById=function(e){return re(fetch(Be+"/pice/"+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.getDrinkObservableByName=function(e){return re(fetch(Be+"/pice/?naziv="+e).then((function(e){if(e.ok)return e.json();throw new Error("fetch error")})).catch((function(e){return console.log(e)})))},e.prototype.piceOnButtonClick=function(e){var n=this;return se(e,"click").pipe(ge(1e3),ie((function(e){return e.target.parentNode})),ie((function(e){return Array.from(e.querySelectorAll(".PiceRadioBtn"))})),ie((function(e){return e})),ie((function(e){return e.filter((function(e){return!0===e.checked}))})),ie((function(e){return e[0]})),ie((function(e){return e.value})),ke((function(e){return n.getDrinkObservableByName(e)})),ie((function(e){return e[0]})))},e}(),Re=function(){function e(){this.nazivPica=["Coca cola","Knjaz Milos","Fanta","Nektar"],this.piceService=new De}return e.prototype.prikazPica=function(e,n){var t=document.createElement("div");t.className="PiceDiv";var r=document.createElement("label");r.innerHTML="Pice: ",r.className="PiceLbl",t.appendChild(r),this.nazivPica.forEach((function(e,n){var r=document.createElement("div"),i=document.createElement("input");i.type="radio",i.name="Pice",i.className="PiceRadioBtn",i.value="".concat(e),i.id="".concat(n),r.appendChild(i);var o=document.createElement("label");o.className="lblPice",o.innerHTML="".concat(e),r.appendChild(o),t.appendChild(r)}));var i=document.createElement("button");i.innerHTML="Dodaj u korpu",i.className="Button",t.appendChild(i),e.appendChild(t),n.kreirajPiceObservable(i)},e}(),qe=function(){function e(){this.hranaService=new He,this.higijenaService=new we,this.piceService=new De,this.lokacijaService=new Ne}return e.prototype.kreirajHigijenaObservable=function(e){this.higijenaObservable=this.higijenaService.higijenaOnButtonClick(e)},e.prototype.kreirajHranaObservable=function(e){this.hranaObservable=this.hranaService.hranaOnButtonClick(e)},e.prototype.kreirajLokacijaObservable=function(e){this.lokacijaObservable=this.lokacijaService.lokacijaInput(e)},e.prototype.kreirajPiceObservable=function(e){this.piceObservable=this.piceService.piceOnButtonClick(e)},e.prototype.kupi=function(e,n){(function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=Oe(e),r=_e(e,1/0),i=e;return i.length?1===i.length?Z(i[0]):xe(r)(re(i,t)):Te})(this.hranaObservable.pipe(ie((function(n){return e.naruciHranu(n)}))),this.piceObservable.pipe(ie((function(n){return e.naruciPice(n)}))),this.higijenaObservable.pipe(ie((function(n){return e.naruciHigijenu(n)}))),this.lokacijaObservable.pipe(ie((function(n){return e.dodajLokaciju(n)})))).subscribe((function(){return e.prikaziNarudzbinu(n)}))},e}(),Ue=new Ee,Fe=new Ce,Ke=new Re,Ge=new Pe,Ve=new Me,Ye=new qe,Ze=document.createElement("div");Ze.className="GlavniDivHrana",document.body.appendChild(Ze),Fe.prikazHrane(Ze,Ye);var Je=document.createElement("div");Je.className="GlavniDivPice",document.body.appendChild(Je),Ke.prikazPica(Je,Ye);var Qe=document.createElement("div");Qe.className="GlavniDivHigijena",document.body.appendChild(Qe),Ue.prikazHigijene(Qe,Ye);var We=document.createElement("div");We.className="GlavniDivLokacija",document.body.appendChild(We),Ge.prikazLokacije(We,Ye);var Xe=document.createElement("div");Xe.className="GlavniDivNaruci",document.body.appendChild(Xe),Ye.kupi(Ve,Xe)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,